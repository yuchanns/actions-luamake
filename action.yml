name: 'Setup luamake'
description: 'Build and setup luamake for different operating systems'
author: 'yuchanns'

inputs:
  luamake-version:
    description: 'luamake release tag version'
    required: false
    default: 'latest'

outputs:
  luamake-path:
    description: 'Path to the luamake executable'
    value: ${{ steps.setup.outputs.luamake-path }}

runs:
  using: 'composite'
  steps:
    - name: Get luamake version tag
      id: get-version
      uses: actions/github-script@v7
      with:
        script: |
          let tag;
          if ('${{ inputs.luamake-version }}' === 'latest') {
            const release = await github.rest.repos.getLatestRelease({
              owner: 'actboy168',
              repo: 'luamake'
            });
            tag = release.data.tag_name;
          } else {
            tag = '${{ inputs.luamake-version }}';
          }
          core.setOutput('tag', tag);
          console.log('Using tag:', tag);

    - name: Checkout luamake source with submodules
      uses: actions/checkout@v4
      with:
        repository: 'actboy168/luamake'
        ref: ${{ steps.get-version.outputs.tag }}
        submodules: recursive
        path: .luamake-temp

    - name: Setup dependencies (Linux)
      if: runner.os == 'Linux'
      shell: bash
      run: |
        sudo apt update
        sudo apt install gcc g++ ninja-build binutils-dev libunwind-dev -y

    - name: Setup MSVC (Windows)
      if: runner.os == 'Windows'
      uses: ilammy/msvc-dev-cmd@v1

    - name: Build luamake
      shell: bash
      working-directory: .luamake-temp
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          chmod +x compile/install.bat 2>/dev/null || true
          compile/install.bat
        else
          chmod +x compile/install.sh
          compile/install.sh
        fi

    - name: Install luamake to system and cleanup
      id: setup
      shell: bash
      run: |
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          TARGET_DIR="C:/Windows/System32"
          LUAMAKE_BINARY="luamake.exe"
        elif [[ "$RUNNER_OS" == "macOS" ]]; then
          TARGET_DIR="/usr/local/bin"
          LUAMAKE_BINARY="luamake"
        else  # Linux
          TARGET_DIR="/usr/local/bin"
          LUAMAKE_BINARY="luamake"
        fi
        
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          echo "Using Windows system directory: $TARGET_DIR"
        else
          sudo mkdir -p "$TARGET_DIR" 2>/dev/null || mkdir -p "$TARGET_DIR"
        fi
        
        if [ -f ".luamake-temp/$LUAMAKE_BINARY" ]; then
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            cp ".luamake-temp/$LUAMAKE_BINARY" "$TARGET_DIR/"
            cp ".luamake-temp/main.lua" "$TARGET_DIR/"
            cp -r ".luamake-temp/scripts" "$TARGET_DIR/"
          else
            sudo cp ".luamake-temp/$LUAMAKE_BINARY" "$TARGET_DIR/" 2>/dev/null || cp ".luamake-temp/$LUAMAKE_BINARY" "$TARGET_DIR/"
            sudo cp ".luamake-temp/main.lua" "$TARGET_DIR/" 2>/dev/null || cp ".luamake-temp/main.lua" "$TARGET_DIR/"
            sudo cp -r ".luamake-temp/scripts" "$TARGET_DIR/" 2>/dev/null || cp -r ".luamake-temp/scripts" "$TARGET_DIR/"
            sudo chmod +x "$TARGET_DIR/$LUAMAKE_BINARY" 2>/dev/null || chmod +x "$TARGET_DIR/$LUAMAKE_BINARY"
          fi
          echo "luamake-path=$TARGET_DIR" >> $GITHUB_OUTPUT
          echo "‚úÖ luamake installed to $TARGET_DIR"
        else
          echo "‚ùå luamake binary not found at .luamake-temp/$LUAMAKE_BINARY"
          ls -la .luamake-temp/
          exit 1
        fi
        
        rm -rf .luamake-temp
        echo "üßπ Cleaned up source directory"
        
        which luamake || echo "Checking luamake installation..."
        if [[ "$RUNNER_OS" == "Windows" ]]; then
          where luamake || echo "luamake.exe installed to $TARGET_DIR"
        fi
        luamake help
